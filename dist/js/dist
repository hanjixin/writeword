'use strict';
// 判断登录

if (!checkLogin()) {
  $('#popLayer').show();
  $('.pop-close').hide();
}
//左侧学科类别
Vue.component('left-nav', {
  props: ['xueke', 'xuekeId', 'index'],
  data: function data() {
    return {
      iconClass: '',
      isActive: false,
      listLink: ''
    };
  },
  created: function created() {
    this.iconClass = 'icon10' + this.index;
    this.listLink = 'list-kd.html?xuekeid=' + this.xueke.id;
    if (getQueryVariable('xuekeid')) {
      if (getQueryVariable('xuekeid') == this.xueke.id) {
        this.isActive = true;
      }
    } else {
      this.isActive = this.index == '1' ? true : false;
    }
  },
  template: '\n  <a :title="xueke.xueke" \n  :class="{on:isActive}"\n  :data-xuekeId="xueke.id" \n  :href="listLink"\n  ><i :class="iconClass"></i>{{xueke.xueke}}</a>\n  '
});
if ($('#leftNav').length > 0) {
  new Vue({
    el: '#leftNav',
    data: {
      xuekes: []
    },
    created: function created() {
      this.xuekes = getxuekelist('1');
    },
    methods: {}
  });
}

//答案详情
Vue.component('kddetail', {
  props: ['json_answer', 'index'],
  data: function data() {
    return {
      nameIndex: '',
      inputMessage: '',
      deleteCount: 0,
      answer: null,
      questionid: null,
      questiontype: null
    };
  },
  created: function created() {
    this.nameIndex = 'inputarr' + this.index;
    this.inputMessage = '';

    var message = this.json_answer.stem;
    var inputMessage = this.json_answer.answer;
    var messageArr = message.split('');
    var messageLength = 0;

    for (var i = 0; i < inputMessage.length; i++) {
      if (message[i] == inputMessage[i]) {
        messageArr[i] = '<span class="right">' + message[i] + '</span>';
      } else {
        messageArr[i] = '<span class="error">' + message[i] + '</span>';
      }
    }
    this.json_answer.stem = messageArr.join('');
  },
  template: '\n    <li :index="index">\n    <p :p-identify="index" v-html="json_answer.stem"></p>\n    <input type="text" class="in-text" disabled\n        :name="nameIndex"\n        v-model="json_answer.answer"\n    >\n    </li>'
});

new Vue({
  el: '#kddetail',
  data: {
    stem: null,
    answers: null
  },
  created: function created() {

    var jsonData;
    var questionData;

    var sendQuestionData = {
      subjectid: subjectid,
      xuekeid: getQueryVariable('xuekeid'),
      questionid: getQueryVariable('qid'),
      timestamp: Date.parse(new Date()) / 1000
    };
    sendQuestionData.sign = getSign(sendQuestionData);

    //请求成功
    $.ajax({
      url: urlConfig.getquestiondetail.url,
      method: urlConfig.getquestiondetail.method,
      data: sendQuestionData,
      dataType: 'json',
      async: false,
      success: function success(res) {
        questionData = res.data;
        var htmlDiv = document.createElement('div');
        htmlDiv.innerHTML = questionData.answer;
        questionData.answer = htmlDiv.innerText;
      }
    });

    var sendData = {
      subjectid: subjectid,
      xuekeid: getQueryVariable('xuekeid'),
      id: getQueryVariable('reportid'),
      questiontype: questionData.id,
      timestamp: Date.parse(new Date()) / 1000
    };
    sendData.sign = getSign(sendData);

    $.ajax({
      headers: {
        'Authorization': 'Bearer ' + getCookie('token')
      },
      url: urlConfig.getrecorddetail.url,
      method: urlConfig.getrecorddetail.method,
      data: sendData,
      dataType: 'json',
      async: false,
      success: function success(res) {
        jsonData = res.data;
        console.log(jsonData.answer);
        var htmlDiv = document.createElement('div');
        htmlDiv.innerHTML = jsonData.answer;
        jsonData.answer = htmlDiv.innerText;
      }
    });

    this.stem = jsonData.stem;
    this.speed = jsonData.report.speed;
    this.usetime = jsonData.report.usetime;
    this.backnum = jsonData.report.backnum;
    this.questiontypeid = jsonData.questiontypeid;
    this.questionid = jsonData.questionid;
    this.xuekeid = jsonData.xuekeid;
    this.answers = [];

    if (this.questiontypeid == '161') {
      jsonData.answer = jsonData.answer.replace(/([^0-9|^a-z|^A-Z|^\u4e00-\u9fa5])*/g, '');
      questionData.answer = questionData.answer.replace(/([^0-9|^a-z|^A-Z|^\u4e00-\u9fa5])*/g, '');
    }
    var tmpLeng = questionData.answer.length;
    var limitLeng = 56;

    console.log(jsonData, jsonData.stem_arr);
    for (var i = 0; i < Math.ceil(tmpLeng / limitLeng); i++) {
      var tmp = { 'stem': questionData.answer.substr(i * limitLeng, limitLeng), 'answer': jsonData.stem_arr[0].substr(i * limitLeng, limitLeng) };
      this.answers.push(tmp);
    }
  },
  methods: {
    reDo: function reDo() {
      if (this.questiontypeid == 160) {
        location.href = 'detail-kd.html?xuekeid=' + this.xuekeid + '&qid=' + this.questionid;
      } else if (this.questiontypeid == 161) {
        location.href = 'detail-td.html?xuekeid=' + this.xuekeid + '&qid=' + this.questionid;
      }
    }
  }
});
'use strict';

var popReport = '\n<div class="pop-box pop-report">\n    <span class="pop-close" @click="closePop"></span>\n    <h3 class="pop-tit minpop-tit">\u7EC3\u4E60\u62A5\u544A</h3>\n    <table>\n        <tr>\n            <th>\u7EC3\u4E60\u7528\u65F6</th>\n            <th>\u6B63\u786E\u7387</th>\n            <th>\u6253\u5B57\u901F\u5EA6</th>\n            <th>\u9000\u683C\u6B21\u6570</th>\n            <th>\u9519\u8BEF\u6B21\u6570</th>\n        </tr>\n        <tr>\n            <td><span class="usetime">{{report.usetime}}</span></td>\n            <td><span class="rightrate">{{report.rightrate}}</span></td>\n            <td><span class="speed">{{report.speed}}</span>\u5B57/\u5206</td>\n            <td><span class="backnum">{{report.backnum}}</span></td>\n            <td><span class="errornum">{{report.errornum}}</span></td>\n        </tr>\n    </table>\n    <p>\n        <span>\u79D1\u76EE\u7C7B\u522B\uFF1A{{questiontypename}}</span>\n        <span>\u7EC3\u4E60\u8BD5\u5377\uFF1A{{stem}}</span>\n        <span>\u7EC3\u4E60\u65F6\u95F4\uFF1A{{createtime}}</span>\n    </p>\n    <div class="clearfix btn-box">\n        <a class="btn" :href="answerLink" title="\u67E5\u770B\u7B54\u6848">\u67E5\u770B\u7B54\u6848</a>\n        <a class="btn" @click="reTest();" title="\u518D\u6B21\u7EC3\u4E60">\u518D\u6B21\u7EC3\u4E60</a>\n        <a class="btn more" :href="moreQuestionLink" title="\u5176\u4ED6\u7EC3\u4E60">\u5176\u4ED6\u7EC3\u4E60</a>\n    </div>\n</div>\n';

//左侧学科类别
Vue.component('left-nav', {
  props: ['xueke', 'xuekeId', 'index'],
  data: function data() {
    return {
      iconClass: '',
      isActive: false,
      listLink: ''
    };
  },
  created: function created() {
    this.iconClass = 'icon10' + this.index;
    this.listLink = 'list-kd.html?xuekeid=' + this.xueke.id;
    if (getQueryVariable('xuekeid')) {
      if (getQueryVariable('xuekeid') == this.xueke.id) {
        this.isActive = true;
      }
    } else {
      this.isActive = this.index == '1' ? true : false;
    }
  },
  template: '\n  <a :title="xueke.xueke" \n  :class="{on:isActive}"\n  :data-xuekeId="xueke.id" \n  :href="listLink"\n  ><i :class="iconClass"></i>{{xueke.xueke}}</a>\n  '
});
if ($('#leftNav').length > 0) {
  new Vue({
    el: '#leftNav',
    data: {
      xuekes: []
    },
    created: function created() {
      this.xuekes = getxuekelist('1');
    },
    methods: {}
  });
}

//看打详情
Vue.component('kddetail', {
  props: ['stem', 'index'],
  data: function data() {
    return {
      nameIndex: '',
      inputMessage: '',
      deleteCount: 0,
      answer: null,
      questionid: null,
      questiontype: null
    };
  },
  created: function created() {
    this.nameIndex = 'inputarr' + this.index;
    this.inputMessage = '';
  },
  methods: {
    //比较
    compare: function compare() {
      var message = this.stem;
      var inputMessage = this.inputMessage;
      var messageArr = message.split('');
      // var messageLength = 0;

      for (var i = 0; i < inputMessage.length; i++) {
        if (message[i] == inputMessage[i]) {
          messageArr[i] = '<span class="right">' + message[i] + '</span>';
        } else {
          messageArr[i] = '<span class="error">' + message[i] + '</span>';
        }
      }
      $('p[p-identify=' + this.index + ']').html(messageArr.join(''));

      // for (var i = 0; i < $('#kddetail li input').length; i++) {
      //   messageLength = messageLength + $('#kddetail li input').eq(i).val().length;
      // }

      // //打字速度
      // var currentMinute = minute <= 0 ? 1 : minute;
      // var speed = parseInt(messageLength / currentMinute)
      // $('span .speed').text(speed + '字/分');

      if (inputMessage.length == message.length) {
        var nextLiObj = $('p[p-identify=' + this.index + ']').parent('li').removeClass('on').next();
        if (nextLiObj.length == 0) {
          $('p[p-identify=' + this.index + ']').parent('li').addClass('on');
          return false;
        }
        nextLiObj.addClass('on');
        nextLiObj.find('input').attr('disabled', false).focus();
        return false;
      }
    },
    //退格
    deleteK: function deleteK() {

      var thisLiObj = $('#kddetail .on');
      if (thisLiObj.prev().length > 0 && thisLiObj.find('input').val().length < 1) {
        thisLiObj.removeClass('on');
        thisLiObj.prev().addClass('on').find('input').focus();
      }

      if (!this.inputMessage) {
        return false;
      }

      this.$emit('deletekey');

      //this.deleteCount++;
    }
  },
  template: '\n    <li :index="index"\n        :class="{on:index==0}"\n    >\n    <p :p-identify="index">{{stem}}</p>\n    <input type="text" class="in-text" autocomplete="off" disabled oncopy="return false" onpaste="return false"\n        :maxlength="stem.length"\n        :name="nameIndex"\n        v-model="inputMessage"\n        @keyup="compare()" \n        @keydown.delete="deleteK()"\n    >\n    </li>'
});

new Vue({
  el: '#kddetail',
  data: {
    deleteCount: 0
  },
  created: function created() {
    var stem_arr = [];
    var stem = '';
    var sendData = {
      subjectid: subjectid,
      timestamp: Date.parse(new Date()) / 1000
    };
    if (getQueryVariable('qid')) {
      sendData.questionid = getQueryVariable('qid');
    }
    if (getQueryVariable('xuekeid')) {
      sendData.xuekeid = getQueryVariable('xuekeid');
    }
    sendData.sign = getSign(sendData);

    //请求成功
    $.ajax({
      url: urlConfig.getquestiondetail.url,
      method: urlConfig.getquestiondetail.method,
      async: false,
      data: sendData,
      dataType: 'json',
      success: function success(res) {
        var htmlDiv = document.createElement('div');
        stem_arr = res.data.stem_arr.map(function (item) {
          htmlDiv.innerHTML = item;
          return htmlDiv.innerText;
        });
        console.log(stem_arr, res.data.stem);
        stem = res.data.stem;
      }
    });

    this.stems = stem_arr;
    $('#questionTitle b').text(stem);
  },
  methods: {
    deletekey: function deletekey() {
      this.deleteCount++;
      $('.dtimes').text(this.deleteCount);
    }
  }
});

// 实时计算打字速度
var computedSpee = function computedSpee() {
  var messageLength = 0;

  for (var i = 0; i < $('#kddetail li input').length; i++) {
    messageLength = messageLength + $('#kddetail li input').eq(i).val().length;
  }

  //打字速度
  var currentMinute = minute <= 0 ? 1 : minute;
  // var speed = parseInt(messageLength / ((currentMinute * 60 + second) / 60))
  var speed = (messageLength / (currentMinute <= 1 ? 1 : (currentMinute * 60 + second) / 60)).toFixed(0);
  $('span .speed').text(speed + '字/分');
};

//计时器
var minute = 0;
var second = 0;
var millisecond = 0;
var nowTime;
var i = 0;
function showTime() {
  millisecond++;
  if (millisecond >= 100) {
    millisecond = 0;
    second++;
  }
  if (second >= 60) {
    second = 0;
    minute++;
  }
  $('#showTime').text((minute < 10 ? '0' + minute : minute) + ':' + (second < 10 ? '0' + second : second));
  computedSpee();
}

//开始看打
$('.kdbtn-box').on('click', '.startBtn', function () {
  if (nowTime != undefined) {
    //计时器已开启
  } else {
    nowTime = setInterval(function () {
      showTime();
    }, 10);
  }
  $('.startBtn').val('暂停').removeClass('startBtn').addClass('pauseBtn');
  $('.resetBtn, .submitBtn').attr('disabled', false);
  $('.resetBtn, .submitBtn').removeClass('disabled');

  var inputObj = $('#kddetail .on input');
  inputObj.attr('disabled', false).focus();
});

//暂停看打
$('.kdbtn-box').on('click', '.pauseBtn', function () {
  window.clearInterval(nowTime);
  nowTime = undefined;
  $('.pauseBtn').val('继续').removeClass('pauseBtn').addClass('continueBtn');

  var inputObj = $('#kddetail input');

  inputObj.attr('disabled', true);
});

//继续看打
$('.kdbtn-box').on('click', '.continueBtn', function () {
  nowTime = setInterval(function () {
    showTime();
  }, 10);
  $('.continueBtn').val('暂停').removeClass('continueBtn').addClass('pauseBtn');

  var inputObj = $('#kddetail .on input');
  inputObj.attr('disabled', false).focus();
});

//重做
$('.kdbtn-box').on('click', '.resetBtn', function () {
  location.reload();
});

//报告弹窗
Vue.component('pop-report', {
  data: function data() {
    return {
      questiontypename: 'null',
      stem: null,
      speed: null,
      createtime: null,
      report: {
        usetime: null,
        rightrate: null,
        backnum: null,
        errornum: null
      },
      answerLink: null,
      moreQuestionLink: null
    };
  },
  created: function created() {
    var that = this;
    this.infomation.$on('submitAnswer', function (data) {

      that.questiontypename = data.questiontypename;
      that.stem = data.stem;
      that.speed = data.speed;
      that.createtime = data.createtime;
      that.report = data.report;
      that.answerLink = 'answer.html?reportid=' + data.id + '&xuekeid=' + data.xuekeid + '&qid=' + data.questionid;
      if (data.questiontypeid == '161') {
        that.moreQuestionLink = 'list-td.html';
      } else {
        that.moreQuestionLink = 'list-kd.html';
      }
      that.moreQuestionLink = that.moreQuestionLink + '?xuekeid=' + data.xuekeid;
    });
  },
  methods: {
    closePop: function closePop() {
      $('#popReport').hide();
    },
    reTest: function reTest() {
      location.reload();
    }
  },
  template: popReport
});

new Vue({
  el: '#popReport',
  data: {},
  methods: {}
});

//提交
$('.kdbtn-box').on('click', '.submitBtn', function () {
  // 停止计时
  window.clearInterval(nowTime);
  nowTime = undefined;
  // 判断登录
  if (!checkLogin()) {
    $('#popLayer').show();
    return false;
  }

  var sendData = {
    subjectid: subjectid,
    xuekeid: getQueryVariable('xuekeid'),
    questiontype: globalcrrentListType,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.questionid = getQueryVariable('qid');
  sendData.usetime = second + minute * 60;
  sendData.sign = getSign(sendData);

  var answerStr = [];
  var totalCount = 0;
  var rightCount = 0;
  var errorCount = 0;
  var inputCount = 0;
  for (var i = 0; i < $('#kddetail li').length; i++) {

    var pStr = $('#kddetail li').eq(i).find('p').text();
    var inputStr = $('#kddetail li').eq(i).find('input').val();

    totalCount += pStr.length;
    inputCount += inputStr.length;
    for (var j = 0; j < pStr.length; j++) {
      if (pStr[j] == inputStr[j]) {
        rightCount += 1;
      } else {
        if (inputStr[j]) {
          errorCount += 1;
        }
      }
    }

    answerStr[i] = {
      stem: pStr,
      answer: inputStr
    };
  }
  var report = {};
  report.usetime = $('#showTime').text();
  // report.rightrate = ((rightCount / totalCount)*100).toFixed(2)+'%';
  report.rightrate = (rightCount / inputCount * 100).toFixed(2) + '%';
  report.speed = parseInt($('.speed').text());
  report.backnum = parseInt($('.dtimes').text());
  report.errornum = errorCount;
  sendData.answer = JSON.stringify(answerStr);
  sendData.report = JSON.stringify(report);
  sendData.userid = getCookie('userid');

  //提交答案
  var returnId;
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.submitanswer.url,
    method: urlConfig.submitanswer.method,
    data: sendData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      if (res.code == '10018') {
        $('#popLayer').show();
        return false;
      }
      returnId = res.data.id;
    },
    error: function error(res) {
      return false;
    }
  });

  //显示报告
  var sendrecData = {
    subjectid: subjectid,
    xuekeid: getQueryVariable('xuekeid'),
    questiontype: globalcrrentListType,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendrecData.id = returnId;
  sendrecData.sign = getSign(sendrecData);
  var returnRecord;
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.getrecorddetail.url,
    method: urlConfig.getrecorddetail.method,
    data: sendrecData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      returnRecord = res.data;
    },
    error: function error(res) {
      return false;
    }
  });
  new Vue().infomation.$emit('submitAnswer', returnRecord);
  $('#popLayer,.kdbtn-box .btn:gt(0)').hide();
  $('#popReport').show();
});
'use strict';

var popReport = '\n<div class="pop-box pop-report">\n    <span class="pop-close" @click="closePop"></span>\n    <h3 class="pop-tit minpop-tit">\u7EC3\u4E60\u62A5\u544A</h3>\n    <table>\n        <tr>\n            <th>\u7EC3\u4E60\u7528\u65F6</th>\n            <th>\u6B63\u786E\u7387</th>\n            <th>\u6253\u5B57\u901F\u5EA6</th>\n            <th>\u9000\u683C\u6B21\u6570</th>\n            <th>\u9519\u8BEF\u6B21\u6570</th>\n        </tr>\n        <tr>\n            <td><span class="usetime">{{report.usetime}}</span></td>\n            <td><span class="rightrate">{{report.rightrate}}</span></td>\n            <td><span class="speed">{{report.speed}}</span>\u5B57/\u5206</td>\n            <td><span class="backnum">{{report.backnum}}</span></td>\n            <td><span class="errornum">{{report.errornum}}</span></td>\n        </tr>\n    </table>\n    <p>\n        <span>\u79D1\u76EE\u7C7B\u522B\uFF1A{{questiontypename}}</span>\n        <span>\u7EC3\u4E60\u8BD5\u5377\uFF1A{{stem}}</span>\n        <span>\u7EC3\u4E60\u65F6\u95F4\uFF1A{{createtime}}</span>\n    </p>\n    <p>\n        <span>\u97F3\u9891\u901F\u5EA6\uFF1A{{speed}}</span>\n    </p>\n    <div class="clearfix btn-box">\n        <a class="btn" :href="answerLink" title="\u67E5\u770B\u7B54\u6848">\u67E5\u770B\u7B54\u6848</a>\n        <a class="btn" @click="reTest();" title="\u518D\u6B21\u7EC3\u4E60">\u518D\u6B21\u7EC3\u4E60</a>\n        <a class="btn more" :href="moreQuestionLink" title="\u5176\u4ED6\u7EC3\u4E60">\u5176\u4ED6\u7EC3\u4E60</a>\n    </div>\n</div>\n';

//左侧学科类别
Vue.component('left-nav', {
  props: ['xueke', 'xuekeId', 'index'],
  data: function data() {
    return {
      iconClass: '',
      isActive: false,
      listLink: ''
    };
  },
  created: function created() {
    this.iconClass = 'icon10' + this.index;
    this.listLink = 'list-td.html?xuekeid=' + this.xueke.id;
    if (getQueryVariable('xuekeid')) {
      if (getQueryVariable('xuekeid') == this.xueke.id) {
        this.isActive = true;
      }
    } else {
      this.isActive = this.index == '1' ? true : false;
    }
  },
  template: '\n  <a :title="xueke.xueke" \n  :class="{on:isActive}"\n  :data-xuekeId="xueke.id" \n  :href="listLink"\n  ><i :class="iconClass"></i>{{xueke.xueke}}</a>\n  '
});
if ($('#leftNav').length > 0) {
  new Vue({
    el: '#leftNav',
    data: {
      xuekes: []
    },
    created: function created() {
      this.xuekes = getxuekelist('1');
    },
    methods: {}
  });
}
// 实时计算打字速度
var computedSpee = function computedSpee() {
  var messageLength = 0;
  messageLength = tddetail.textMessage.length;
  var currentMinute = minute <= 0 ? 1 : minute;
  console.log(messageLength, currentMinute, minute);
  var speed = parseInt(messageLength / currentMinute);
  $('span .speed').text(speed + '字/分');
};
//计时器
var minute = 0;
var second = 0;
var totalSecond = 0;
var millisecond = 0;
var nowTime;
var i = 0;
function showTime() {

  second++;
  totalSecond++;
  if (second >= 60) {
    second = 0;
    minute++;
  }
  $('#showTime').text((minute < 10 ? '0' + minute : minute) + ':' + (second < 10 ? '0' + second : second));
  if (audio.duration >= totalSecond) {
    $('.tddetail-audio .progress').text((minute < 10 ? '0' + minute : minute) + ':' + (second < 10 ? '0' + second : second));
  }
  computedSpee();
}

//听打详情
var tddetail = new Vue({
  el: '#tddetail',
  data: {
    audioSrc: null,
    isActive: false,
    textMessage: null,
    textMessageFilter: null,
    deleteCount: null,
    maxLength: null,
    answer: null
  },
  watch: {
    textMessage: function textMessage() {
      this.textMessageFilter = this.textMessage.replace(/([^0-9|^a-z|^A-Z|^\u4e00-\u9fa5])*/g, '');
      if (!this.textMessage) {
        $('.submitBtn').attr('disabled', true).addClass('disabled');
      } else {
        $('.submitBtn').attr('disabled', false).removeClass('disabled');
      }
    }
  },
  created: function created() {
    var returnArr = [];
    var sendData = {
      subjectid: subjectid,
      timestamp: Date.parse(new Date()) / 1000
    };
    if (getQueryVariable('qid')) {
      sendData.questionid = getQueryVariable('qid');
    }
    if (getQueryVariable('xuekeid')) {
      sendData.xuekeid = getQueryVariable('xuekeid');
    }
    sendData.sign = getSign(sendData);

    //请求成功
    $.ajax({
      url: urlConfig.getquestiondetail.url,
      method: urlConfig.getquestiondetail.method,
      data: sendData,
      dataType: 'json',
      async: false,
      success: function success(res) {
        returnArr = res.data;
      }
    });

    $('#questionTitle b').text(returnArr.stem);
    $('.tddetail-audio .type').text('(' + returnArr.speed + '字/分钟)');
    // TUDO 替换音频地址
    this.audioSrc = returnArr.audiourl;
    this.answer = returnArr.answer.replace(/([^0-9|^a-z|^A-Z|^\u4e00-\u9fa5])*/g, '');
    this.maxLength = returnArr.answer.length;
  },
  methods: {
    //比较
    compare: function compare() {
      var textMessage = this.textMessage;
      // var messageLength = 0;
      // messageLength = this.textMessage.length;
      // var currentMinute = minute <= 0 ? 1 : minute;
      // console.log(messageLength, currentMinute, minute)
      // var speed = parseInt( messageLength / currentMinute)
      // $('span .speed').text(speed + '字/分');
    },
    //退格
    deleteK: function deleteK() {
      if (!this.textMessage) {
        return false;
      }
      this.deleteCount++;
      $('.dtimes').text(this.deleteCount);
    }
  }
});

//音频
var audio = $('#tdaudio')[0];
var audioLength;
var audioCurrent;
var ifAudioPlay = true;
//音频长度
audio.onloadedmetadata = function () {
  if (parseInt(audio.duration / 60) < 1) {
    audioLength = '00:' + parseInt(audio.duration);
  } else {
    audioLength = parseInt(audio.duration / 60) + ':' + parseInt(audio.duration % 60);
  }
  $('.tddetail-audio .length').text('/' + audioLength);
};
// 音频已结束
audio.onended = function () {
  ifAudioPlay = false;
};

//开始听打
$('.tdbtn-box').on('click', '.startBtn', function () {
  if (nowTime != undefined) {
    //计时器已开启
  } else {
    nowTime = setInterval(function () {
      showTime();
    }, 1000);
  }

  $('.startBtn').val('暂停').removeClass('startBtn').addClass('pauseBtn');
  $('.resetBtn').attr('disabled', false);
  $('.resetBtn').removeClass('disabled');

  audio.play();
  $('#in-text').attr('disabled', false).focus();
  tddetail.isActive = true;
});

//暂停听打
$('.tdbtn-box').on('click', '.pauseBtn', function () {
  window.clearInterval(nowTime);
  nowTime = undefined;
  $('.pauseBtn').val('继续').removeClass('pauseBtn').addClass('continueBtn');

  audio.pause();
  $('#in-text').attr('disabled', true);
  tddetail.isActive = false;
});

//继续听打
$('.tdbtn-box').on('click', '.continueBtn', function () {
  if (nowTime != undefined) {
    //计时器已开启
  } else {
    nowTime = setInterval(function () {
      showTime();
    }, 1000);
  }
  $('.continueBtn').val('暂停').removeClass('continueBtn').addClass('pauseBtn');

  if (ifAudioPlay) {
    audio.play();
  }
  $('#in-text').attr('disabled', false).focus();
  tddetail.isActive = true;
});

//重做
$('.tdbtn-box').on('click', '.resetBtn', function () {
  location.reload();
});

//报告弹窗
Vue.component('pop-report', {
  data: function data() {
    return {
      questiontypename: 'null',
      stem: null,
      speed: null,
      createtime: null,
      report: {
        usetime: null,
        rightrate: null,
        backnum: null,
        errornum: null
      },
      answerLink: null,
      moreQuestionLink: null
    };
  },
  created: function created() {
    var that = this;
    this.infomation.$on('submitAnswer', function (data) {

      that.questiontypename = data.questiontypename;
      that.stem = data.stem;
      that.speed = data.speed;
      that.createtime = data.createtime;
      that.report = data.report;
      that.answerLink = 'answer.html?reportid=' + data.id + '&xuekeid=' + data.xuekeid + '&qid=' + data.questionid;
      if (data.questiontypeid == '161') {
        that.moreQuestionLink = 'list-td.html';
      } else {
        that.moreQuestionLink = 'list-kd.html';
      }
      that.moreQuestionLink = that.moreQuestionLink + '?xuekeid=' + data.xuekeid + '&speed=' + data.speed;
    });
  },
  methods: {
    closePop: function closePop() {
      $('#popReport').hide();
    },
    reTest: function reTest() {
      location.reload();
    }
  },
  template: popReport
});

new Vue({
  el: '#popReport',
  data: {},
  methods: {}
});

//提交
$('.tdbtn-box').on('click', '.submitBtn', function () {
  // 停止计时
  window.clearInterval(nowTime);
  nowTime = undefined;
  // 判断登录
  if (!checkLogin()) {
    $('#popLayer').show();
    return false;
  }

  var sendData = {
    subjectid: subjectid,
    xuekeid: getQueryVariable('xuekeid'),
    questiontype: globalcrrentListType,
    questionid: getQueryVariable('qid'),
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.usetime = second + minute * 60;
  sendData.sign = getSign(sendData);

  var answerStr = [];
  var totalCount = 0;
  var inputCount = 0;
  var rightCount = 0;
  var errorCount = 0;
  var pStr = tddetail.answer;
  var inputStr = tddetail.textMessageFilter;

  totalCount += pStr.length;
  inputCount += inputStr.length;
  for (var j = 0; j < pStr.length; j++) {
    if (pStr[j] == inputStr[j]) {
      rightCount += 1;
    } else {
      if (inputStr[j]) {
        errorCount += 1;
      }
    }
  }

  answerStr[i] = {
    stem: pStr,
    answer: tddetail.textMessage
  };

  var report = {};
  console.log(totalCount, rightCount, inputStr, inputStr.length, '222');
  report.usetime = $('#showTime').text();
  // report.rightrate = ((rightCount / inputStr.length)*100).toFixed(2)+'%';
  report.rightrate = (rightCount / inputCount * 100).toFixed(2) + '%';
  report.speed = parseInt($('.speed').text());
  report.backnum = parseInt($('.dtimes').text());
  report.errornum = errorCount;
  sendData.report = JSON.stringify(report);
  sendData.answer = JSON.stringify(answerStr);
  sendData.userid = getCookie('userid');

  var sendRecordData = {
    subjectid: subjectid,
    xuekeid: '0',
    questiontype: globalcrrentListType,
    timestamp: Date.parse(new Date()) / 1000
  };

  //提交答案
  var returnId;
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.submitanswer.url,
    method: urlConfig.submitanswer.method,
    data: sendData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      if (res.code == '10018') {
        $('#popLayer').show();
        return false;
      }
      returnId = res.data.id;
    }
  });

  //显示报告
  var sendrecData = {
    subjectid: subjectid,
    xuekeid: getQueryVariable('xuekeid'),
    questiontype: globalcrrentListType,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendrecData.id = returnId;
  sendrecData.sign = getSign(sendrecData);
  var returnRecord;
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.getrecorddetail.url,
    method: urlConfig.getrecorddetail.method,
    data: sendrecData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      returnRecord = res.data;
    },
    error: function error(res) {
      return false;
    }
  });
  new Vue().infomation.$emit('submitAnswer', returnRecord);
  $('#popLayer,.tdbtn-box .btn:gt(0)').hide();
  $('#popReport').show();
});
'use strict';
//左侧学科类别

Vue.component('left-nav', {
  props: ['xueke', 'xuekeid', 'index'],
  data: function data() {
    return {
      iconClass: ''
    };
  },
  created: function created() {
    this.iconClass = 'icon10' + this.index;
  },
  methods: {
    showList: function showList() {
      $(event.srcElement).addClass('on').siblings().removeClass('on');
      var list = getquestionlist();
      this.infomation.$emit('change-list', { 'list': list });
    }
  },
  template: '\n  <span :title="xueke.xueke" \n  :class="{on:index==1}"\n  :data-xuekeid="xueke.id" \n  @click="showList()"\n  ><i :class="iconClass"></i>{{xueke.xueke}}</span>\n  '
});
if ($('#leftNav').length > 0) {
  new Vue({
    el: '#leftNav',
    data: {
      xuekes: []
    },
    created: function created() {
      this.xuekes = getxuekelist('1');
    },
    methods: {}
  });
}

//打字速度类别
Vue.component('speed-nav', {
  props: ['speed', 'index'],
  data: function data() {
    return {};
  },
  created: function created() {},
  methods: {
    showList: function showList() {
      $(event.srcElement).addClass('on').siblings().removeClass('on');
      var list = getquestionlist();
      this.infomation.$emit('change-list', { 'list': list });
    }
  },
  template: '<li :data-speed="speed.id"\n    :class="{on:index==0}"\n    @click="showList()"\n   >{{speed.name}}</li>'
});
if ($('#speedDiv').length > 0) {
  new Vue({
    el: '#speedDiv',
    data: {
      speeds: []
    },
    created: function created() {
      this.speeds = getxuekelist('3');
    },
    methods: {}
  });
}

//试题列表
Vue.component('question-list', {
  props: ['list', 'index'],
  data: function data() {
    return {
      questiontype: '',
      xuekeid: $('#leftNav .on').eq(0).data('xuekeid'),
      detaillink: ''
    };
  },
  created: function created() {
    this.questiontype = globalcrrentListType;
    if (this.questiontype == '160') {
      this.detaillink = 'detail-kd.html';
    } else {
      this.detaillink = 'detail-td.html';
    }
    this.xuekeid = $('#leftNav .on').eq(0).data('xuekeid');
    this.detaillink = this.detaillink + '?xuekeid=' + this.xuekeid + '&qid=';
  },
  methods: {},
  template: '<li>\n  <a :href="detaillink+list.id" :title="list.stem" class="imgbox"><img :src="list.img" alt=""></a>\n  <p><a :href="detaillink+list.id" :title="list.stem">{{list.stem}}</a></p>\n  <div class="time">\u66F4\u65B0\u65F6\u95F4\uFF1A{{list.updatedTime}}</div>\n</li>'
});
if ($('#list').length > 0) {
  new Vue({
    el: '#list',
    data: {
      lists: []
    },
    created: function created() {
      var that = this;
      this.lists = getquestionlist();
      //接收列表信息
      this.infomation.$on('change-list', function (data) {
        that.lists = data.list;
      });
    },
    methods: {}
  });
}

//带参数初始化
$(function () {
  if (getQueryVariable('xuekeid')) {
    $('#leftNav span[data-xuekeid="' + getQueryVariable('xuekeid') + '"]').click();
  }
  if (getQueryVariable('speed')) {
    $('#speedDiv li[data-speed="' + getQueryVariable('speed') + '"]').click();
  }
});

//获取试题列表
function getquestionlist() {
  var returnArr = [];
  var sendData = {
    subjectid: subjectid,
    page: '1',
    speed: $('#speedDiv li[class="on"]').attr('data-speed') ? $('#speedDiv li[class="on"]').attr('data-speed') : '',
    perpage: '1000000000',
    timestamp: Date.parse(new Date()) / 1000
  };
  if ($('#leftNav span[class="on"]').attr('data-xuekeid')) {
    sendData.xuekeid = $('#leftNav span[class="on"]').attr('data-xuekeid');
  }
  if (globalcrrentListType) {
    sendData.questiontype = globalcrrentListType;
  }

  sendData.sign = getSign(sendData);

  //请求成功
  $.ajax({
    url: urlConfig.getquestionlist.url,
    method: urlConfig.getquestionlist.method,
    async: false,
    data: sendData,
    dataType: 'json',
    success: function success(res) {
      $('.list-box').animate({ scrollTop: 0 }, 100);
      returnArr = res.data;
    }
  });
  return returnArr;
}
'use strict';
// document.write("<script src='http://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.min.js'></script>");

(function (window) {
  var theUA = window.navigator.userAgent.toLowerCase();
  if (theUA.match(/msie\s\d+/) && theUA.match(/msie\s\d+/)[0] || theUA.match(/trident\s?\d+/) && theUA.match(/trident\s?\d+/)[0]) {
    var ieVersion = theUA.match(/msie\s\d+/)[0].match(/\d+/)[0] || theUA.match(/trident\s?\d+/)[0];
    if (ieVersion < 8) {
      var str = "您的浏览器版本太low了,已经和时代脱轨了 :(";
      var str2 = "推荐使用:<a href='https://www.baidu.com/s?ie=UTF-8&wd=%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8' target='_blank' style='color:red;'>谷歌</a>," + "<a href='https://www.baidu.com/s?ie=UTF-8&wd=%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8' target='_blank' style='color:red;'>火狐</a>," + "或其他双核浏览器";
      document.writeln("<pre style='text-align:center;color:#fff;background-color:#333; height:100%;border:0;position:fixed;top:0;left:0;width:100%;z-index:1234;margin:0;'>" + "<h2 style='padding-top:200px;margin:0;'><strong style='color:#fff;'>" + str + "<br/></strong></h2><h2>" + str2 + "</h2><h2 style='margin:0'><strong style='color:#fff;'>如果您使用的是双核浏览器,请切换到极速模式访问<br/></strong></h2></pre>");
      document.execCommand("Stop");
    };
  }
})(window);

/*
TUDO
配置API url
测试地址：http://mmc-test.huatu.com
Beta地址: http://yk91.test.huatu.com
正式地址：http://mmc.ekao123.com
*/

var apiUrl = 'http://mmc-test.huatu.com/'; //接口地址
var signKey = 'CMD3qB0kwOsrTJpASv+8YhhSA58yzissr4r2Ouf2rCk'; //签名key
var subjectid = '2300';
var urlConfig = {
  getcode: {
    url: apiUrl + 'api/tiku/political/getcode',
    method: 'post'
  },
  codelogin: {
    url: apiUrl + '/api/tiku/political/codelogin',
    method: 'post'
  },
  getxueke: {
    url: apiUrl + 'api/tiku/political/getxueke',
    method: 'post'
  },
  getquestionlist: {
    url: apiUrl + 'api/tiku/political/getquestionlist',
    method: 'post'
  },
  getquestiondetail: {
    url: apiUrl + 'api/tiku/political/getquestiondetail',
    method: 'post'
  },
  submitanswer: {
    url: apiUrl + 'api/tiku/political/submitanswer',
    method: 'post'
  },
  getrecordlist: {
    url: apiUrl + 'api/tiku/political/getrecordlist',
    method: 'post'
  },
  getrecorddetail: {
    url: apiUrl + 'api/tiku/political/getrecorddetail',
    method: 'post'
  },
  verify: {
    url: apiUrl + 'admin/verify?key=policical',
    method: 'get'
  }
};
var globalcrrentListType; //试题类型

var header = "\n<h1 class=\"logo\">\n  <a href=\"index.html\" title=\"\u534E\u56FE\u653F\u6CD5\">\u534E\u56FE\u653F\u6CD5</a>\n  <em class=\"line\"></em>\n  <span>\u4E66\u8BB0\u5458\u901F\u5F55\u7CFB\u7EDF</span>\n</h1>\n<div class=\"fr\" id=\"hlogin\">\n  <!-- \u9876\u90E8\u5BFC\u822A -->\n  <a class=\"h-nav\" :class=\"{'on':ifkd}\" href=\"list-kd.html\" title=\"\u770B\u6253\u7EC3\u4E60\">\u770B\u6253\u7EC3\u4E60</a>\n  <a class=\"h-nav\" :class=\"{'on':iftd}\" href=\"list-td.html\" title=\"\u542C\u6253\u7EC3\u4E60\">\u542C\u6253\u7EC3\u4E60</a>\n  <!-- \u5DF2\u767B\u5F55 -->\n  <div class=\"if-login\" v-if=\"iflogin\">\n    <span class=\"header-uid\">{{ phone_hide }}</span>\n    <div class=\"header-uchosse\">\n      <a href=\"record.html\" title=\"\u7EC3\u4E60\u8BB0\u5F55\">\u7EC3\u4E60\u8BB0\u5F55</a>\n      <span title=\"\u70B9\u51FB\u9000\u51FA\" v-on:click=\"logout\">\u9000\u51FA</span>\n    </div>\n  </div>\n  <!-- \u672A\u767B\u5F55 -->\n  <span class=\"else-login\" v-else v-on:click=\"showLoingPop()\"><i class=\"icon01\"></i>\u5FEB\u901F\u767B\u5F55</span>\n</div>\n";

var footer = "\n<p class=\"width footnav\">\n  <a href=\"#\" title=\"\">\u534E\u56FE\u7B80\u4ECB</a>\n  <a href=\"#\" title=\"\">\u534E\u56FE\u8363\u8A89</a>\n  <a href=\"#\" title=\"\">\u534E\u56FE\u516C\u76CA</a>\n  <a href=\"#\" title=\"\">\u5A92\u4F53\u5173\u6CE8</a>\n  <a href=\"#\" title=\"\">\u8054\u7CFB\u6211\u4EEC</a>\n  <a href=\"#\" title=\"\">\u6CD5\u5F8B\u58F0\u660E</a>\n  <a href=\"#\" title=\"\">\u8D1F\u8D23\u58F0\u660E</a>\n  <a href=\"#\" title=\"\">\u7F51\u7AD9\u5BFC\u822A</a>\n  <a href=\"#\" title=\"\">\u6295\u8BC9\u4E0E\u5EFA\u8BAE</a>\n  <a href=\"#\" title=\"\">\u7533\u8BF7\u53CB\u94FE</a>\n  <a href=\"#\" title=\"\">\u52A0\u5165\u6211\u4EEC</a>\n</p>\n<p>\u4EACICP\u5907 11028696\u53F7 \u4EACICP\u8BC1090387\u53F7 \u4EAC\u516C\u7F51\u5B89\u5907 11010802010141 \u7535\u4FE1\u4E1A\u52A1\u5BA1\u6279\u30102009\u3011\u5B57\u7B2C233\u53F7\u51FD</p>\n";

var popLayer = "\n<div class=\"pop-box pop-login\" id=\"popLogin\">\n  <span class=\"pop-close\" @click=\"closePop\"></span>\n  <h3 class=\"pop-tit\">\u767B\u5F55</h3>\n  <form id=\"loginForm\">\n    <div class=\"clearfix in-box\">\n      <input type=\"text\" class=\"in-text\" v-model=\"phone\" name=\"phone\" value=\"\" placeholder=\"\u8BF7\u8F93\u5165\u624B\u673A\u53F7\" autocomplete=\"off\">\n      <p class=\"war\" v-show=\"phoneMessage\">{{phoneMessage}}</p>\n    </div>\n    <div class=\"clearfix in-box verify-box\" id=\"verifyBox\" v-if=\"showVerify\">\n      <input type=\"text\" class=\"in-text\" v-model=\"verify\" name=\"verify\" value=\"\" placeholder=\"\u8BF7\u8F93\u5165\u9A8C\u8BC1\u7801\" autocomplete=\"off\">\n      <img class=\"verify-img\" :src=\"verifyUrl\" onClick=\"this.src= urlConfig.verify.url + '&' + Math.random(); \" alt=\"\u56FE\u5F62\u9A8C\u8BC1\u7801\" title=\"\u70B9\u51FB\u66F4\u6362\u9A8C\u8BC1\u7801\">\n      <p class=\"war\" v-show=\"verifyMessage\">{{verifyMessage}}</p>\n    </div>\n    <div class=\"clearfix in-box\">\n      <input type=\"text\" class=\"in-text\" v-model=\"code\" name=\"code\" value=\"\" placeholder=\"\u8BF7\u8F93\u5165\u77ED\u4FE1\u9A8C\u8BC1\u7801\" autocomplete=\"off\">\n      <input type=\"button\" class=\"codebtn\" v-bind:class=\"codebtnoff\" v-bind:disabled=\"disabled\" v-on:click=\"sendCode\" :value=\"sendCodeBtn\" >\n      <p class=\"tip\" v-show=\"loginMessage\">{{loginMessage}}</p>\n      <p class=\"war\" v-show=\"codeMessage\">{{codeMessage}}</p>\n    </div>\n    <input type=\"button\" class=\"loginbtn\" @click=\"login()\" value=\"\u5FEB\u901F\u767B\u5F55\">\n  </form>\n</div>\n";

Vue.prototype.infomation = new Vue();

//顶部
new Vue({
  el: '#header',
  data: {
    header: header
  },
  created: function created() {}
});

//登录
new Vue({
  el: '#hlogin',
  data: {
    ifkd: false,
    iftd: false,
    iflogin: false,
    phone_hide: ''
  },
  created: function created() {

    if (globalcrrentListType == '160') {
      this.ifkd = true;
    }
    if (globalcrrentListType == '161') {
      this.iftd = true;
    }

    var self = this;

    this.phone_hide = getCookie('phone_hide');
    // if (this.phone_hide == null && getCookie('phone') && getCookie('token') && getCookie('userid')){
    //   this.iflogin = true;
    // } 
    console.log(this.phone_hide);
    if (this.phone_hide) this.iflogin = true;
    console.log(this.phone_hide);

    this.infomation.$on('modifyIfLogin', function (data) {
      self.iflogin = data;
      self.phone_hide = getCookie('phone_hide');
    });
  },
  methods: {
    showLoingPop: function showLoingPop(event) {
      $('#popLayer').show();
    },
    logout: function logout() {
      delCookie('token');
      delCookie('userid');
      delCookie('phone');
      delCookie('phone_hide');
      // setCookie('token', "", -1);
      // setCookie('userid', "", -1);
      // setCookie('phone', "", -1);
      // setCookie('phone_hide', "", -1);
      this.iflogin = false;
      // console.log(this.iflogin)
    }
  }
});

//底部
new Vue({
  el: '#footer',
  data: {
    footer: footer
  }
});

Vue.component('pop-layer', {
  data: function data() {
    return {
      verifyUrl: urlConfig.verify.url,
      showVerify: false,
      phone: null,
      code: null,
      verify: null,
      codeError: 0,
      phoneMessage: null,
      verifyMessage: null,
      sendCodeBtn: '立即发送',
      codeMessage: null,
      loginMessage: '新用户登录后将自动创建账号',
      disabled: false,
      sysSecond: 60,
      interValObj: null,
      codebtnoff: {
        codebtnoff: false
      }
    };
  },
  methods: {
    setRemainTime: function setRemainTime() {
      if (this.sysSecond > 0) {
        this.sysSecond = this.sysSecond - 1;
        var second = Math.floor(this.sysSecond % 60);
        var minite = Math.floor(this.sysSecond / 60 % 60);
        var hour = Math.floor(this.sysSecond / 3600 % 24);
        this.sendCodeBtn = second + '秒';
      } else {
        window.clearInterval(this.interValObj);
        this.sendCodeBtn = '立即发送';
        this.codebtnoff.codebtnoff = false;
        this.disabled = false;
        this.sysSecond = 60;
      }
    },
    sendCode: function sendCode() {
      var that = this;
      if (!this.phone) {
        this.phoneMessage = '请输入手机号';
        return false;
      } else {
        if (!/^(1[0-9]{10})$/.test(this.phone)) {
          this.phoneMessage = '请输入有效的手机号码！';
          return false;
        } else {
          this.phoneMessage = null;
        }
      }
      var sendData = {
        'phone': this.phone,
        'timestamp': Date.parse(new Date()) / 1000
      };

      sendData.sign = getSign(sendData);

      $.ajax({
        url: urlConfig.getcode.url,
        method: urlConfig.getcode.method,
        data: sendData,
        dataType: 'json',
        async: false,
        success: function success(res) {
          var code = res.code;
          var data = res.data;
          if (code != '200') {
            this.phoneMessage = res.msg;
            return false;
          }

          // 短信验证码发送成功
          that.phoneMessage = null;
          that.codebtnoff.codebtnoff = true;
          that.disabled = true;

          that.interValObj = window.setInterval(function () {
            that.setRemainTime();
          }, 1000);
        }
      });
    },
    login: function login() {

      if (!this.phone) {
        this.phoneMessage = '请输入手机号';
        return false;
      } else {
        if (!/^(1[0-9]{10})$/.test(this.phone)) {
          this.phoneMessage = '请输入有效的手机号码！';
          return false;
        } else {
          this.phoneMessage = null;
        }
      }

      if (!this.code) {
        this.codeMessage = '请输入短信验证码';
        this.loginMessage = null;
        return false;
      } else {
        this.codeMessage = null;
        this.loginMessage = '新用户登录后将自动创建账号';
      }
      if (this.showVerify && !this.verify) {
        this.verifyMessage = '请输入图片验证码';
        return false;
      } else {
        this.verifyMessage = null;
      }
      var sendData = {
        'phone': this.phone,
        'timestamp': Date.parse(new Date()) / 1000,
        'code': this.code
      };

      if (this.showVerify) {
        sendData.verify = this.verify;
      }

      sendData.sign = getSign(sendData);

      var that = this;
      $.ajax({
        url: urlConfig.codelogin.url,
        method: urlConfig.codelogin.method,
        data: sendData,
        dataType: 'json',
        success: function success(res) {

          var resCode = res.code;
          var resData = res.data;

          if (resCode != '200') {
            if (resCode == '100003') {
              that.verifyMessage = res.msg; //图形验证码错误
            } else if (resCode == '100004') {
              that.codeMessage = res.msg; //短信验证码错误
              that.loginMessage = null;
              that.codeError++;
              //短信验证码连续输入错误3次则必须输入图形验证码
              if (that.codeError >= '3') {
                that.showVerify = true;
              }
            } else {
              that.codeMessage = res.msg;
              that.loginMessage = null;
            }

            return false;
          }

          mySetCookie('token', resData.token);
          mySetCookie('userid', resData.userid);
          mySetCookie('phone', resData.phone);
          mySetCookie('phone_hide', resData.phone_hide);

          that.infomation.$emit('modifyIfLogin', true);
          $('#popLayer').hide();

          that.phoneMessage = null;
          that.verifyMessage = null;
          that.codeMessage = null;
          that.loginMessage = '新用户登录后将自动创建账号';

          return false;
        }
      });
    },
    closePop: function closePop(event) {
      $('#popLayer, #popReport').hide();
    }
  },
  template: popLayer
});

//弹窗
new Vue({
  el: '#popLayer',
  data: {},
  methods: {}
});

function getSign(params) {
  var res = Object.keys(params).sort();
  var str = '';
  for (var key in res) {
    str += res[key] + '=' + params[res[key]] + '&';
  }
  str += 'key=' + signKey;
  return md5(str).toUpperCase();
}

function mySetCookie(name, value) {
  var Days = 30;
  var exp = new Date();
  exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
  document.cookie = name + "=" + escape(value) + ";path=/;expires=" + exp.toGMTString();
}

//读取cookies
function getCookie(name) {
  var arr,
      reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
  if (arr = document.cookie.match(reg)) {
    return unescape(arr[2]);
  } else {
    return null;
  }
}

//删除cookies
function delCookie(name) {
  var exp = new Date();
  exp.setTime(exp.getTime() - 1111);
  var cval = getCookie(name);
  if (cval != null) {
    document.cookie = name + "=" + cval + ";path=/;expires=" + exp.toGMTString();
  }
  // $.cookie(name, "", {expires: -1})
  // $.cookie(name,null,{path:"/"});
  // $.removeCookie(name,{ path: '/'}); //path为指定路径，直接删除该路径下的cookie
  // $.cookie(name,null,{ path: '/'}); //将cookie名为‘openid’的值设置为空，实际已删除
}

//判断登录
function checkLogin() {

  if (!getCookie('token') || !getCookie('userid') || !getCookie('phone') || !getCookie('phone_hide')) {
    return false;
  }
  return true;
}

//获取参数
function getQueryVariable(variable) {
  var query = window.location.search.substring(1);
  var vars = query.split("&");
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split("=");
    if (pair[0] == variable) {
      return pair[1];
    }
  }
  return false;
}

//获取学科
function getxuekelist(type) {
  var returnArr = [];

  var sendData = {
    subjectid: subjectid,
    datatype: type,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.sign = getSign(sendData);

  //请求成功
  $.ajax({
    url: urlConfig.getxueke.url,
    method: urlConfig.getxueke.method,
    async: false,
    data: sendData,
    dataType: 'json',
    success: function success(res) {
      if (type == '1') {
        returnArr = res.data.xueke;
      } else if (type == '2') {
        returnArr = res.data.questiontype;
      } else if (type == '3') {
        returnArr = res.data.speed;
      } else {
        returnArr = res.data;
      }
    }
  });
  return returnArr;
}
'use strict';

var popReport = '\n<div class="pop-box pop-report">\n    <span class="pop-close" @click="closePop"></span>\n    <h3 class="pop-tit minpop-tit">\u7EC3\u4E60\u62A5\u544A</h3>\n    <table>\n        <tr>\n            <th>\u7EC3\u4E60\u7528\u65F6</th>\n            <th>\u6B63\u786E\u7387</th>\n            <th>\u6253\u5B57\u901F\u5EA6</th>\n            <th>\u9000\u683C\u6B21\u6570</th>\n            <th>\u9519\u8BEF\u6B21\u6570</th>\n        </tr>\n        <tr>\n            <td><span class="usetime">{{report.usetime}}</span></td>\n            <td><span class="rightrate">{{report.rightrate}}</span></td>\n            <td><span class="speed">{{report.speed}}</span>\u5B57/\u5206</td>\n            <td><span class="backnum">{{report.backnum}}</span></td>\n            <td><span class="errornum">{{report.errornum}}</span></td>\n        </tr>\n    </table>\n    <p>\n        <span>\u79D1\u76EE\u7C7B\u522B\uFF1A{{questiontypename}}</span>\n        <span>\u7EC3\u4E60\u8BD5\u5377\uFF1A{{stem}}</span>\n        <span>\u7EC3\u4E60\u65F6\u95F4\uFF1A{{createtime}}</span>\n    </p>\n    <p>\n        <span>\u97F3\u9891\u901F\u5EA6\uFF1A{{speed}}</span>\n    </p>\n    <div class="clearfix btn-box">\n        <a class="btn" :href="answerLink" title="\u67E5\u770B\u7B54\u6848">\u67E5\u770B\u7B54\u6848</a>\n        <a class="btn" :href="reTestLink" title="\u518D\u6B21\u7EC3\u4E60">\u518D\u6B21\u7EC3\u4E60</a>\n        <a class="btn more" :href="moreQuestionLink" title="\u5176\u4ED6\u7EC3\u4E60">\u5176\u4ED6\u7EC3\u4E60</a>\n    </div>\n</div>\n';

//判断登录
if (!checkLogin()) {
  $('#popLayer').show();
  $('.pop-close').hide();
}

//分页
// if(res.extra.totalcount) {
//   $('#recordPage').pagination({
//     length: getrecordCount(), //总条数
//     every: 10, //每页条数
//     onClick: function(){
//       var recordType = $('#recordType .on').attr('data-type')
//       var page = parseInt($('#recordPage span[aria-selected="true"]').text())
//       getrecordlist(recordType, page);
//       $('.record-box').animate({ scrollTop: 0 }, 100)
//     },
//   });
// }


//切换类别
$('#recordType li').click(function () {
  $(this).addClass('on').siblings().removeClass('on');
  $('.ui-page-x').children().eq(1).click();
  getrecordlist($(this).data('type'), '1');
  // 看打160 听打161
  if ($(this).data('type') == '161') {
    $('.page-td').show();
    $('.page-kd').hide();
  } else if ($(this).data('type') == '160') {
    $('.page-td').hide();
    $('.page-kd').show();
  }
});

//报告列表
Vue.component('record-tbody', {
  props: ['record', 'index'],
  data: function data() {
    return {};
  },
  created: function created() {},
  methods: {
    showRecord: function showRecord(recordid) {
      getrecordDetail(recordid);
    }
  },
  template: '<dd class="clearfix">\n    <div>{{record.stem}}</div>\n    <div>{{record.xuekename}}</div>\n    <div v-if="record.questiontypeid == \'161\'">{{record.speed}}</div>\n    <div v-else>-</div>\n    <div>{{record.createtime}}</div>\n    <div><span class="detail-btn" @click="showRecord(record.id)">\u67E5\u770B</span></div>\n  </dd>'
});

var recordList = new Vue({
  el: '#recordList',
  data: {
    records: []
  }
});

//报告弹窗
Vue.component('pop-report', {
  data: function data() {
    return {
      questionid: null,
      createtime: null,
      stem: null,
      xuekeid: null,
      speed: null,
      report: {
        usetime: null,
        rightrate: null,
        backnum: null,
        errornum: null
      },
      usetime: null,
      answer: null,
      id: null,
      questiontypeid: null,
      questiontypename: null,
      xuekename: null,
      answerLink: null,
      reTestLink: null,
      moreQuestionLink: null
    };
  },
  created: function created() {
    var that = this;
    this.infomation.$on('recordDetail', function (data) {
      that.report.usetime = data.report.usetime;
      that.report.rightrate = data.report.rightrate;
      that.report.speed = data.report.speed;
      that.report.backnum = data.report.backnum;
      that.report.errornum = data.report.errornum;
      that.questiontypename = data.questiontypename;
      that.stem = data.stem;
      that.createtime = data.createtime;
      that.speed = data.speed;
      that.answerLink = 'answer.html?xuekeid=' + data.xuekeid + '&reportid=' + data.id + '&qid=' + data.questionid;
      if (data.questiontypeid == '161') {
        that.reTestLink = 'detail-td.html?xuekeid=' + data.xuekeid + '&qid=' + data.questionid;
        that.moreQuestionLink = 'list-td.html?xuekeid=' + data.xuekeid;
      } else {
        that.reTestLink = 'detail-kd.html?xuekeid=' + data.xuekeid + '&qid=' + data.questionid;
        that.moreQuestionLink = 'list-kd.html?xuekeid=' + data.xuekeid;
      }
    });
  },
  methods: {
    closePop: function closePop() {
      $('#popReport').hide();
    }
  },
  template: popReport
});

var recordDetail = new Vue({
  el: '#popReport',
  data: {}
});

getrecordlist('161', '1');

//获取报告列表
function getrecordlist(recordType, page) {

  var sendData = {
    subjectid: subjectid,
    xuekeid: 0,
    questiontype: $('#recordType .on').data('type'),
    page: page ? page : 1,
    perpage: 10,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.sign = getSign(sendData);

  var returnRecordlist = [];
  // //请求成功
  // $.ajax({
  //   headers: {
  //     'Authorization':'Bearer '+getCookie('token')
  //   },
  //   url: urlConfig.getrecordlist.url,
  //   method: urlConfig.getrecordlist.method,
  //   data: sendData,
  //   async: false,
  //   dataType: 'json',
  //   success: function (res) {
  //     returnRecordlist = res.data
  //     if(res.extra.totalcount) {
  //       $('#recordPage').pagination({
  //         length: getrecordCount(), //总条数
  //         every: 10, //每页条数
  //         onClick: function(){
  //           var recordType = $('#recordType .on').attr('data-type')
  //           var page = parseInt($('#recordPage span[aria-selected="true"]').text())
  //           getrecordlist(recordType, page);
  //           $('.record-box').animate({ scrollTop: 0 }, 100)
  //         },
  //       });
  //     }

  //   }
  // })
  //请求成功
  $.ajax({
    headers: {
      Authorization: 'Bearer ' + getCookie('token')
    },
    url: urlConfig.getrecordlist.url,
    method: urlConfig.getrecordlist.method,
    data: sendData,
    async: false,
    dataType: 'json',
    success: function success(res) {
      returnRecordlist = res.data;
      console.log('totalcount', res.extra.totalcount);
      //分页
      if (res.extra.totalcount) {
        if (recordType == '161') {
          console.log('recordPage');
          $('#recordPage').pagination({
            length: res.extra.totalcount, //总条数
            every: 10, //每页条数
            onClick: function onClick() {
              var recordType = $('#recordType .on').attr('data-type');
              var page = parseInt($('#recordPage span[aria-selected="true"]').text());
              getrecordlist(recordType, page);
              $('.record-box').animate({ scrollTop: 0 }, 100);
            }
          });
          // setTimeout(function() {
          //   $('#recordPage2').hide()
          //   console.log('延迟执行')
          // }, 50)
        } else if (recordType == '160') {
          $('#recordPage2').pagination({
            length: res.extra.totalcount, //总条数
            every: 10, //每页条数
            onClick: function onClick() {
              var recordType = $('#recordType .on').attr('data-type');
              var page = parseInt($('#recordPage2 span[aria-selected="true"]').text());
              getrecordlist(recordType, page);
              $('.record-box').animate({ scrollTop: 0 }, 100);
            }
          });
          // setTimeout(function() {
          //   $('#recordPage').hide()
          // }, 50)
        }
      }
    }
  });

  recordList.records = returnRecordlist;
  //如果没有练习
  if (recordList.records.length == 0) {
    $('.record-box, .page, .ifnull').hide();
    if (recordType == '161') {
      $('.iftdnull').show();
    } else if (recordType == '160') {
      $('.ifkdnull').show();
    }
  } else {
    $('.ifnull').hide();
    $('.record-box, .page').show();
  }
}

//获取总条数
function getrecordCount() {
  var sendData = {
    subjectid: subjectid,
    xuekeid: 0,
    questiontype: $('#recordType .on').data('type'),
    page: 1,
    perpage: 100000,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.sign = getSign(sendData);

  //请求成功
  var returnTotal = '0';
  var resArr = [];
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.getrecordlist.url,
    method: urlConfig.getrecordlist.method,
    data: sendData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      resArr = res.data;
    }
  });
  returnTotal = resArr.length;
  return returnTotal;
}

// 获取报告详情
function getrecordDetail(recordid) {

  var sendData = {
    subjectid: subjectid,
    xuekeid: 0,
    questiontype: $('#recordType .on').eq(0).data('type'),
    id: recordid,
    timestamp: Date.parse(new Date()) / 1000
  };
  sendData.sign = getSign(sendData);

  //显示报告
  $.ajax({
    headers: {
      'Authorization': 'Bearer ' + getCookie('token')
    },
    url: urlConfig.getrecorddetail.url,
    method: urlConfig.getrecorddetail.method,
    data: sendData,
    dataType: 'json',
    async: false,
    success: function success(res) {
      recordDetail.infomation.$emit('recordDetail', res.data);
      $('#popReport').show();
    }
  });
}
